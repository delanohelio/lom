// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nanuvem.lom.web;

import com.nanuvem.lom.dao.typesquare.Entity;
import com.nanuvem.lom.dao.typesquare.Property;
import com.nanuvem.lom.service.PropertyService;
import com.nanuvem.lom.web.PropertyController;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect PropertyController_Roo_Controller_Json {
    
    @Autowired
    PropertyService PropertyController.propertyService;
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PropertyController.showJson(@PathVariable("id") Long id) {
        Property property = propertyService.findProperty(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (property == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(property.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PropertyController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Property> result = propertyService.findAllPropertys();
        return new ResponseEntity<String>(Property.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PropertyController.createFromJson(@RequestBody String json) {
        Property property = Property.fromJsonToProperty(json);
        propertyService.saveProperty(property);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PropertyController.createFromJsonArray(@RequestBody String json) {
        for (Property property: Property.fromJsonArrayToPropertys(json)) {
            propertyService.saveProperty(property);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> PropertyController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Property property = Property.fromJsonToProperty(json);
        if (propertyService.updateProperty(property) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> PropertyController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Property property: Property.fromJsonArrayToPropertys(json)) {
            if (propertyService.updateProperty(property) == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> PropertyController.deleteFromJson(@PathVariable("id") Long id) {
        Property property = propertyService.findProperty(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (property == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        propertyService.deleteProperty(property);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByEntity", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PropertyController.jsonFindPropertysByEntity(@RequestParam("entity") Entity entity) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Property.toJsonArray(Property.findPropertysByEntity(entity).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByEntityAndNameLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PropertyController.jsonFindPropertysByEntityAndNameLike(@RequestParam("entity") Entity entity, @RequestParam("name") String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Property.toJsonArray(Property.findPropertysByEntityAndNameLike(entity, name).getResultList()), headers, HttpStatus.OK);
    }
    
}
